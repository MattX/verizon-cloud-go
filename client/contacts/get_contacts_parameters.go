// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetContactsParams creates a new GetContactsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetContactsParams() *GetContactsParams {
	return &GetContactsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetContactsParamsWithTimeout creates a new GetContactsParams object
// with the ability to set a timeout on a request.
func NewGetContactsParamsWithTimeout(timeout time.Duration) *GetContactsParams {
	return &GetContactsParams{
		timeout: timeout,
	}
}

// NewGetContactsParamsWithContext creates a new GetContactsParams object
// with the ability to set a context for a request.
func NewGetContactsParamsWithContext(ctx context.Context) *GetContactsParams {
	return &GetContactsParams{
		Context: ctx,
	}
}

// NewGetContactsParamsWithHTTPClient creates a new GetContactsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetContactsParamsWithHTTPClient(client *http.Client) *GetContactsParams {
	return &GetContactsParams{
		HTTPClient: client,
	}
}

/* GetContactsParams contains all the parameters to send to the API endpoint
   for the get contacts operation.

   Typically these are written to a http.Request.
*/
type GetContactsParams struct {

	/* Count.

	   Maximum children to include in a paginated response.  Defaulted to 200.
	*/
	Count *int64

	/* Page.

	   Page number to return, for paginated responses. Defaulted to 1.
	*/
	Page *int64

	/* Query.

	   Contains the text to be searched to particular parts of a contact. Supports following fields: id, name, email, im, address, tel, incaseofemergency (Example: incaseofemergency:true and incaseofemergency:false), field-tag.type (Example: address.home), address.type.subfield (Example: address.home.street), favorite (Example: favorite:true and favorite:false)
	*/
	Query *string

	/* Sort.

	   Specify sort order for response. Syntax is :'{field}+{asc|desc}'.  Valid values for 'field' are: firstname, lastname, created, modified, id
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get contacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContactsParams) WithDefaults() *GetContactsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get contacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContactsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get contacts params
func (o *GetContactsParams) WithTimeout(timeout time.Duration) *GetContactsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get contacts params
func (o *GetContactsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get contacts params
func (o *GetContactsParams) WithContext(ctx context.Context) *GetContactsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get contacts params
func (o *GetContactsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get contacts params
func (o *GetContactsParams) WithHTTPClient(client *http.Client) *GetContactsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get contacts params
func (o *GetContactsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get contacts params
func (o *GetContactsParams) WithCount(count *int64) *GetContactsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get contacts params
func (o *GetContactsParams) SetCount(count *int64) {
	o.Count = count
}

// WithPage adds the page to the get contacts params
func (o *GetContactsParams) WithPage(page *int64) *GetContactsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get contacts params
func (o *GetContactsParams) SetPage(page *int64) {
	o.Page = page
}

// WithQuery adds the query to the get contacts params
func (o *GetContactsParams) WithQuery(query *string) *GetContactsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get contacts params
func (o *GetContactsParams) SetQuery(query *string) {
	o.Query = query
}

// WithSort adds the sort to the get contacts params
func (o *GetContactsParams) WithSort(sort *string) *GetContactsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get contacts params
func (o *GetContactsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetContactsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
