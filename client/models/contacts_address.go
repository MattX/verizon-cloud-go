// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactsAddress contacts address
//
// swagger:model contacts_address
type ContactsAddress struct {

	// apartment
	Apartment string `json:"apartment,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// When combined with 'type', provides a unique identifier for the entry
	// Required: true
	Indx *int64 `json:"indx"`

	// pobox
	Pobox string `json:"pobox,omitempty"`

	// For sorting. Lower numbers indicate a higher preference. The value must be less than 100.
	// Required: true
	Preference *int64 `json:"preference"`

	// state
	State string `json:"state,omitempty"`

	// street
	Street string `json:"street,omitempty"`

	// Type of address, i.e., 'home', 'business', 'personal', 'primary', 'other'
	// Required: true
	Type *string `json:"type"`

	// zipcode
	Zipcode string `json:"zipcode,omitempty"`
}

// Validate validates this contacts address
func (m *ContactsAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactsAddress) validateIndx(formats strfmt.Registry) error {

	if err := validate.Required("indx", "body", m.Indx); err != nil {
		return err
	}

	return nil
}

func (m *ContactsAddress) validatePreference(formats strfmt.Registry) error {

	if err := validate.Required("preference", "body", m.Preference); err != nil {
		return err
	}

	return nil
}

func (m *ContactsAddress) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this contacts address based on context it is used
func (m *ContactsAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContactsAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactsAddress) UnmarshalBinary(b []byte) error {
	var res ContactsAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
