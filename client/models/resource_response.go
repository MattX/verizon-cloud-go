// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceResponse resource response
//
// swagger:model resource_response
type ResourceResponse struct {

	// Checksum of the resource.
	Checksum string `json:"checksum,omitempty"`

	// ContentToken of the resource.
	ContentToken string `json:"contentToken,omitempty"`

	// LastModifiedDate of the resource.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`

	// Location of the resource.
	Location string `json:"location,omitempty"`

	// Name of the resource.
	// Required: true
	Name *string `json:"name"`

	// Id of the resource.
	ResourceID string `json:"resourceId,omitempty"`

	// Size of the resource.
	Size int64 `json:"size,omitempty"`

	// SubType of the resource.
	SubType string `json:"subType,omitempty"`

	// Type of the resource.
	// Required: true
	Type *string `json:"type"`

	// The resource identifier.
	UID string `json:"uid,omitempty"`

	// Direct download link for the resource. Applicable for file resources only.
	URL string `json:"url,omitempty"`
}

// Validate validates this resource response
func (m *ResourceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ResourceResponse) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource response based on context it is used
func (m *ResourceResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceResponse) UnmarshalBinary(b []byte) error {
	var res ResourceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
