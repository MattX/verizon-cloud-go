// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlaylistItem playlist item
//
// swagger:model playlist_item
type PlaylistItem struct {

	// Checksum detail
	// Required: true
	Checksum *string `json:"checksum"`

	// Show accessibility of the content
	// Required: true
	ContentAccessible *bool `json:"contentAccessible"`

	// Unique token for content
	// Required: true
	ContentToken *string `json:"contentToken"`

	// File extension
	// Required: true
	Extension *string `json:"extension"`

	// file attribute
	// Required: true
	FileAttribute *PlaylistItem `json:"fileAttribute"`

	// Name of the file
	// Required: true
	Filename *string `json:"filename"`

	// Type of content
	// Required: true
	MimeType *string `json:"mimeType"`

	// Path of the file
	// Required: true
	Path *string `json:"path"`

	// Size of the item
	// Required: true
	Size *int64 `json:"size"`

	// tags
	// Required: true
	Tags interface{} `json:"tags"`

	// Unique identifier of the resource
	// Required: true
	URI *string `json:"uri"`

	// Timestamp of version created date
	// Required: true
	VersionCreated *string `json:"versionCreated"`
}

// Validate validates this playlist item
func (m *PlaylistItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecksum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentAccessible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMimeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionCreated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlaylistItem) validateChecksum(formats strfmt.Registry) error {

	if err := validate.Required("checksum", "body", m.Checksum); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistItem) validateContentAccessible(formats strfmt.Registry) error {

	if err := validate.Required("contentAccessible", "body", m.ContentAccessible); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistItem) validateContentToken(formats strfmt.Registry) error {

	if err := validate.Required("contentToken", "body", m.ContentToken); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistItem) validateExtension(formats strfmt.Registry) error {

	if err := validate.Required("extension", "body", m.Extension); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistItem) validateFileAttribute(formats strfmt.Registry) error {

	if err := validate.Required("fileAttribute", "body", m.FileAttribute); err != nil {
		return err
	}

	if m.FileAttribute != nil {
		if err := m.FileAttribute.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileAttribute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileAttribute")
			}
			return err
		}
	}

	return nil
}

func (m *PlaylistItem) validateFilename(formats strfmt.Registry) error {

	if err := validate.Required("filename", "body", m.Filename); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistItem) validateMimeType(formats strfmt.Registry) error {

	if err := validate.Required("mimeType", "body", m.MimeType); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistItem) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistItem) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistItem) validateTags(formats strfmt.Registry) error {

	if m.Tags == nil {
		return errors.Required("tags", "body", nil)
	}

	return nil
}

func (m *PlaylistItem) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistItem) validateVersionCreated(formats strfmt.Registry) error {

	if err := validate.Required("versionCreated", "body", m.VersionCreated); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this playlist item based on the context it is used
func (m *PlaylistItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileAttribute(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlaylistItem) contextValidateFileAttribute(ctx context.Context, formats strfmt.Registry) error {

	if m.FileAttribute != nil {
		if err := m.FileAttribute.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileAttribute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileAttribute")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlaylistItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlaylistItem) UnmarshalBinary(b []byte) error {
	var res PlaylistItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
