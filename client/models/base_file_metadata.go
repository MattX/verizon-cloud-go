// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseFileMetadata base file metadata
//
// swagger:model base_file_metadata
type BaseFileMetadata struct {

	// The file content's SHA-256 checksum value
	// Required: true
	Checksum *string `json:"checksum"`

	// Whether the content ingestion step has been completed on the file
	// Required: true
	CiComplete *bool `json:"ciComplete"`

	// If false, the file content is protected by copywrite and is not accessible to the user
	// Required: true
	ContentAccessible *bool `json:"contentAccessible"`

	// Determines a file's accessibility. It can take the following values: SHARE(file has no restrictions and is shareable), VIEW(file is not shareable. All other operations are permitted) & BLOCK(file is not accessible. Only delete operation permitted)
	// Required: true
	ContentPermissions *string `json:"contentPermissions"`

	// A unique string representing the file. Will change if file content is updated.  Required for certain APIs, such as /thumbnails
	// Required: true
	ContentToken *string `json:"contentToken"`

	// If true, the file has been logically deleted
	// Required: true
	Deleted *bool `json:"deleted"`

	// The file's extension, as extracted from the filename
	// Required: true
	Extension *string `json:"extension"`

	// The name of the file
	// Required: true
	Name *string `json:"name"`

	// The folder where the file is located
	// Required: true
	ParentPath *string `json:"parentPath"`

	// The size of the file, in bytes
	// Required: true
	Size *int64 `json:"size"`

	// A set of file attributes.  The attribute set will vary depending on file type
	// Required: true
	SystemAttributes interface{} `json:"systemAttributes"`

	// Unique identifier of the resource
	// Required: true
	URI *string `json:"uri"`

	// File version.  This number increases when the file is updated
	// Required: true
	Version *int64 `json:"version"`

	// Creation timestamp for the file's current version, in ISO-8601 format
	// Required: true
	VersionCreated *string `json:"versionCreated"`

	// Array of viewUid
	// Required: true
	ViewUID []*ViewUID `json:"viewUid"`
}

// Validate validates this base file metadata
func (m *BaseFileMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecksum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiComplete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentAccessible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseFileMetadata) validateChecksum(formats strfmt.Registry) error {

	if err := validate.Required("checksum", "body", m.Checksum); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateCiComplete(formats strfmt.Registry) error {

	if err := validate.Required("ciComplete", "body", m.CiComplete); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateContentAccessible(formats strfmt.Registry) error {

	if err := validate.Required("contentAccessible", "body", m.ContentAccessible); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateContentPermissions(formats strfmt.Registry) error {

	if err := validate.Required("contentPermissions", "body", m.ContentPermissions); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateContentToken(formats strfmt.Registry) error {

	if err := validate.Required("contentToken", "body", m.ContentToken); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateExtension(formats strfmt.Registry) error {

	if err := validate.Required("extension", "body", m.Extension); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateParentPath(formats strfmt.Registry) error {

	if err := validate.Required("parentPath", "body", m.ParentPath); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateSystemAttributes(formats strfmt.Registry) error {

	if m.SystemAttributes == nil {
		return errors.Required("systemAttributes", "body", nil)
	}

	return nil
}

func (m *BaseFileMetadata) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateVersionCreated(formats strfmt.Registry) error {

	if err := validate.Required("versionCreated", "body", m.VersionCreated); err != nil {
		return err
	}

	return nil
}

func (m *BaseFileMetadata) validateViewUID(formats strfmt.Registry) error {

	if err := validate.Required("viewUid", "body", m.ViewUID); err != nil {
		return err
	}

	for i := 0; i < len(m.ViewUID); i++ {
		if swag.IsZero(m.ViewUID[i]) { // not required
			continue
		}

		if m.ViewUID[i] != nil {
			if err := m.ViewUID[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("viewUid" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("viewUid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this base file metadata based on the context it is used
func (m *BaseFileMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateViewUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseFileMetadata) contextValidateViewUID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ViewUID); i++ {

		if m.ViewUID[i] != nil {
			if err := m.ViewUID[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("viewUid" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("viewUid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseFileMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseFileMetadata) UnmarshalBinary(b []byte) error {
	var res BaseFileMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
