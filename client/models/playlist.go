// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Playlist playlist
//
// swagger:model playlist
type Playlist struct {

	// Timestamp for creation date of playlist
	// Required: true
	CreationDate *string `json:"creationDate"`

	// Timestamp for last modified date of playlist
	// Required: true
	LastModifiedDate *string `json:"lastModifiedDate"`

	// Regex pattern for playlist
	// Required: true
	MimeTypeRegex *string `json:"mimeTypeRegex"`

	// The name of the playlist
	// Required: true
	Name *string `json:"name"`

	// Array of paths
	Paths []string `json:"paths"`

	// Array of shareAssociation
	ShareAssociation []*ShareAssociation `json:"shareAssociation"`

	// The type of playlist
	// Required: true
	Type *string `json:"type"`

	// The uid of the playlist
	// Required: true
	UID *string `json:"uid"`

	// Unique identifier of the resource
	// Required: true
	URI *string `json:"uri"`
}

// Validate validates this playlist
func (m *Playlist) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMimeTypeRegex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShareAssociation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Playlist) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateLastModifiedDate(formats strfmt.Registry) error {

	if err := validate.Required("lastModifiedDate", "body", m.LastModifiedDate); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateMimeTypeRegex(formats strfmt.Registry) error {

	if err := validate.Required("mimeTypeRegex", "body", m.MimeTypeRegex); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateShareAssociation(formats strfmt.Registry) error {
	if swag.IsZero(m.ShareAssociation) { // not required
		return nil
	}

	for i := 0; i < len(m.ShareAssociation); i++ {
		if swag.IsZero(m.ShareAssociation[i]) { // not required
			continue
		}

		if m.ShareAssociation[i] != nil {
			if err := m.ShareAssociation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shareAssociation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shareAssociation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Playlist) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this playlist based on the context it is used
func (m *Playlist) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShareAssociation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Playlist) contextValidateShareAssociation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShareAssociation); i++ {

		if m.ShareAssociation[i] != nil {
			if err := m.ShareAssociation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shareAssociation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shareAssociation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Playlist) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Playlist) UnmarshalBinary(b []byte) error {
	var res Playlist
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
