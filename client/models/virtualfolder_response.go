// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualfolderResponse virtualfolder response
//
// swagger:model virtualfolder_response
type VirtualfolderResponse struct {

	// Whether virtual folder is immutable
	// Required: true
	Immutable bool `json:"immutable"`

	// The name of the virtual folder
	// Required: true
	Name *string `json:"name"`

	// The name of the parent folder
	// Required: true
	ParentPath *string `json:"parentPath"`

	// The size of the virtual folder, in bytes
	// Required: true
	Size *int64 `json:"size"`

	// Creation timestamp for the virtual folder's current version, in ISO-8601 format
	// Required: true
	VersionCreated *string `json:"versionCreated"`
}

// Validate validates this virtualfolder response
func (m *VirtualfolderResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImmutable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionCreated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualfolderResponse) validateImmutable(formats strfmt.Registry) error {

	if err := validate.Required("immutable", "body", bool(m.Immutable)); err != nil {
		return err
	}

	return nil
}

func (m *VirtualfolderResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VirtualfolderResponse) validateParentPath(formats strfmt.Registry) error {

	if err := validate.Required("parentPath", "body", m.ParentPath); err != nil {
		return err
	}

	return nil
}

func (m *VirtualfolderResponse) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *VirtualfolderResponse) validateVersionCreated(formats strfmt.Registry) error {

	if err := validate.Required("versionCreated", "body", m.VersionCreated); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this virtualfolder response based on context it is used
func (m *VirtualfolderResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VirtualfolderResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualfolderResponse) UnmarshalBinary(b []byte) error {
	var res VirtualfolderResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
