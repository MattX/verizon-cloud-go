// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShareResponse share response
//
// swagger:model share_response
type ShareResponse struct {

	// The date and time the share was created.
	CreationDate string `json:"creationDate,omitempty"`

	// Expiration date on the share.
	ExpirationDate string `json:"expirationDate,omitempty"`

	// The time to live of the share in seconds.
	ExpiresIn int64 `json:"expiresIn,omitempty"`

	// The date and time the share was last modified from the perspective of a member.
	InboundLastModifiedDate string `json:"inboundLastModifiedDate,omitempty"`

	// The date and time the share was last modified from the perspective of the owner.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`

	// links
	Links []*ShareResponseLinksItems0 `json:"links"`

	// The name of the share.
	// Required: true
	Name *string `json:"name"`

	// The owner of the share
	Owner interface{} `json:"owner,omitempty"`

	// The invite key of a public share.
	PublicInviteKey string `json:"publicInviteKey,omitempty"`

	// Array of resources
	Resources []*ShareResponseResourcesItems0 `json:"resources"`

	// The sharer of the share
	Sharer interface{} `json:"sharer,omitempty"`

	// The total count of shared resources.
	TotalResourceCount int64 `json:"totalResourceCount,omitempty"`

	// The resource identifier.
	UID string `json:"uid,omitempty"`
}

// Validate validates this share response
func (m *ShareResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShareResponse) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShareResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ShareResponse) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this share response based on the context it is used
func (m *ShareResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShareResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {
			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShareResponse) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {
			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShareResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShareResponse) UnmarshalBinary(b []byte) error {
	var res ShareResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ShareResponseLinksItems0 share response links items0
//
// swagger:model ShareResponseLinksItems0
type ShareResponseLinksItems0 struct {

	// The URI of the link.
	// Required: true
	Link *string `json:"link"`

	// The link identifier.
	// Required: true
	Rel *string `json:"rel"`
}

// Validate validates this share response links items0
func (m *ShareResponseLinksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShareResponseLinksItems0) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *ShareResponseLinksItems0) validateRel(formats strfmt.Registry) error {

	if err := validate.Required("rel", "body", m.Rel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this share response links items0 based on context it is used
func (m *ShareResponseLinksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShareResponseLinksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShareResponseLinksItems0) UnmarshalBinary(b []byte) error {
	var res ShareResponseLinksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ShareResponseResourcesItems0 share response resources items0
//
// swagger:model ShareResponseResourcesItems0
type ShareResponseResourcesItems0 struct {

	// Checksum of the resource.
	Checksum string `json:"checksum,omitempty"`

	// ContentToken of the resource.
	ContentToken string `json:"contentToken,omitempty"`

	// LastModifiedDate of the resource.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`

	// Location of the resource.
	Location string `json:"location,omitempty"`

	// Name of the resource.
	// Required: true
	Name *string `json:"name"`

	// Id of the resource.
	ResourceID string `json:"resourceId,omitempty"`

	// Size of the resource.
	Size int64 `json:"size,omitempty"`

	// SubType of the resource.
	SubType string `json:"subType,omitempty"`

	// Type of the resource.
	// Required: true
	Type *string `json:"type"`

	// The resource identifier.
	UID string `json:"uid,omitempty"`

	// Direct download link for the resource. Applicable for file resources only.
	URL string `json:"url,omitempty"`
}

// Validate validates this share response resources items0
func (m *ShareResponseResourcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShareResponseResourcesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ShareResponseResourcesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this share response resources items0 based on context it is used
func (m *ShareResponseResourcesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShareResponseResourcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShareResponseResourcesItems0) UnmarshalBinary(b []byte) error {
	var res ShareResponseResourcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
