// Code generated by go-swagger; DO NOT EDIT.

package playlists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new playlists API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for playlists API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePlaylist(params *DeletePlaylistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePlaylistOK, error)

	DeletePlaylistItem(params *DeletePlaylistItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePlaylistItemOK, error)

	GetPlaylist(params *GetPlaylistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlaylistOK, error)

	GetPlaylistContent(params *GetPlaylistContentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlaylistContentOK, error)

	GetPlaylistItems(params *GetPlaylistItemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlaylistItemsOK, error)

	GetPlaylists(params *GetPlaylistsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlaylistsOK, error)

	PostPlaylist(params *PostPlaylistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPlaylistCreated, error)

	PostPlaylistItem(params *PostPlaylistItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPlaylistItemOK, error)

	PutPlaylists(params *PutPlaylistsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutPlaylistsOK, error)

	UpdatePlaylist(params *UpdatePlaylistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePlaylistOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeletePlaylist deletes a playlist

  Delete a specific playlist.
*/
func (a *Client) DeletePlaylist(params *DeletePlaylistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePlaylistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlaylistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_playlist",
		Method:             "DELETE",
		PathPattern:        "/playlists/{playlistUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePlaylistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePlaylistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_playlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePlaylistItem removes an item from a playlist

  Allow a client to remove a single item from a playlist.
*/
func (a *Client) DeletePlaylistItem(params *DeletePlaylistItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePlaylistItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlaylistItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_playlist_item",
		Method:             "DELETE",
		PathPattern:        "/playlists/{playlistUid}/items/{itemUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePlaylistItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePlaylistItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_playlist_item: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlaylist gets a playlist definition

  Get a specific playlist definition.
*/
func (a *Client) GetPlaylist(params *GetPlaylistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlaylistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlaylistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_playlist",
		Method:             "GET",
		PathPattern:        "/playlists/{playlistUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlaylistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlaylistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_playlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlaylistContent retrieves playlist content

  Returns the content of a playlist at the specified path.
*/
func (a *Client) GetPlaylistContent(params *GetPlaylistContentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlaylistContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlaylistContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_playlistContent",
		Method:             "GET",
		PathPattern:        "/playlists/{playlistUid}/items/{itemUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlaylistContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlaylistContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_playlistContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlaylistItems gets a list of a playlists s items

  Get details of all the playlist's items for a given playlist.
*/
func (a *Client) GetPlaylistItems(params *GetPlaylistItemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlaylistItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlaylistItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_playlist_items",
		Method:             "GET",
		PathPattern:        "/playlists/{playlistUid}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlaylistItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlaylistItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_playlist_items: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlaylists gets a list of the user s playlists

  Get a user specific list of playlists.
*/
func (a *Client) GetPlaylists(params *GetPlaylistsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlaylistsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlaylistsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_playlists",
		Method:             "GET",
		PathPattern:        "/playlists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlaylistsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlaylistsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_playlists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPlaylist creates a playlist

  Create a playlist, with or without items.
*/
func (a *Client) PostPlaylist(params *PostPlaylistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPlaylistCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPlaylistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_playlist",
		Method:             "POST",
		PathPattern:        "/playlists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPlaylistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPlaylistCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_playlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPlaylistItem adds item s to a playlist

  Allow a client to add single or multiple items in a playlist.
*/
func (a *Client) PostPlaylistItem(params *PostPlaylistItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPlaylistItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPlaylistItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_playlist_item",
		Method:             "POST",
		PathPattern:        "/playlists/{playlistUid}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPlaylistItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPlaylistItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_playlist_item: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutPlaylists updates a playlist

  Allows a client to update a playlist's name.
*/
func (a *Client) PutPlaylists(params *PutPlaylistsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutPlaylistsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPlaylistsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put_playlists",
		Method:             "PUT",
		PathPattern:        "/playlists/{playlistUid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPlaylistsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPlaylistsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put_playlists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePlaylist updates a playlist by sending a new playlist definition model

  Allows a client to update a playlist by sending a new 'playlistDefinition' model.
*/
func (a *Client) UpdatePlaylist(params *UpdatePlaylistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePlaylistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePlaylistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_playlist",
		Method:             "PUT",
		PathPattern:        "/playlists/{playlistUid}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePlaylistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePlaylistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_playlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
