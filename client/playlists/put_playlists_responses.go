// Code generated by go-swagger; DO NOT EDIT.

package playlists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/MattX/verizon-cloud-go/models"
)

// PutPlaylistsReader is a Reader for the PutPlaylists structure.
type PutPlaylistsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutPlaylistsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutPlaylistsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutPlaylistsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutPlaylistsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutPlaylistsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutPlaylistsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutPlaylistsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutPlaylistsOK creates a PutPlaylistsOK with default headers values
func NewPutPlaylistsOK() *PutPlaylistsOK {
	return &PutPlaylistsOK{}
}

/* PutPlaylistsOK describes a response with status code 200, with default header values.

OK
*/
type PutPlaylistsOK struct {
	Payload *models.Playlist
}

func (o *PutPlaylistsOK) Error() string {
	return fmt.Sprintf("[PUT /playlists/{playlistUid}][%d] putPlaylistsOK  %+v", 200, o.Payload)
}
func (o *PutPlaylistsOK) GetPayload() *models.Playlist {
	return o.Payload
}

func (o *PutPlaylistsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Playlist)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPlaylistsBadRequest creates a PutPlaylistsBadRequest with default headers values
func NewPutPlaylistsBadRequest() *PutPlaylistsBadRequest {
	return &PutPlaylistsBadRequest{}
}

/* PutPlaylistsBadRequest describes a response with status code 400, with default header values.

[Bad Request] Parameters missing or invalid.
*/
type PutPlaylistsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PutPlaylistsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /playlists/{playlistUid}][%d] putPlaylistsBadRequest  %+v", 400, o.Payload)
}
func (o *PutPlaylistsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutPlaylistsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPlaylistsUnauthorized creates a PutPlaylistsUnauthorized with default headers values
func NewPutPlaylistsUnauthorized() *PutPlaylistsUnauthorized {
	return &PutPlaylistsUnauthorized{}
}

/* PutPlaylistsUnauthorized describes a response with status code 401, with default header values.

[Unauthorized] Bearer token is missing, expired, or invalid.
*/
type PutPlaylistsUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *PutPlaylistsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /playlists/{playlistUid}][%d] putPlaylistsUnauthorized  %+v", 401, o.Payload)
}
func (o *PutPlaylistsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutPlaylistsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPlaylistsForbidden creates a PutPlaylistsForbidden with default headers values
func NewPutPlaylistsForbidden() *PutPlaylistsForbidden {
	return &PutPlaylistsForbidden{}
}

/* PutPlaylistsForbidden describes a response with status code 403, with default header values.

[Forbidden] User is not authorized to access storage APIs.
*/
type PutPlaylistsForbidden struct {
	Payload *models.ErrorResponse
}

func (o *PutPlaylistsForbidden) Error() string {
	return fmt.Sprintf("[PUT /playlists/{playlistUid}][%d] putPlaylistsForbidden  %+v", 403, o.Payload)
}
func (o *PutPlaylistsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutPlaylistsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPlaylistsNotFound creates a PutPlaylistsNotFound with default headers values
func NewPutPlaylistsNotFound() *PutPlaylistsNotFound {
	return &PutPlaylistsNotFound{}
}

/* PutPlaylistsNotFound describes a response with status code 404, with default header values.

[Not Found] Resource not found.
*/
type PutPlaylistsNotFound struct {
	Payload *models.ErrorResponse
}

func (o *PutPlaylistsNotFound) Error() string {
	return fmt.Sprintf("[PUT /playlists/{playlistUid}][%d] putPlaylistsNotFound  %+v", 404, o.Payload)
}
func (o *PutPlaylistsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutPlaylistsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPlaylistsServiceUnavailable creates a PutPlaylistsServiceUnavailable with default headers values
func NewPutPlaylistsServiceUnavailable() *PutPlaylistsServiceUnavailable {
	return &PutPlaylistsServiceUnavailable{}
}

/* PutPlaylistsServiceUnavailable describes a response with status code 503, with default header values.

[Service Unavailable] See response body for more detail.
*/
type PutPlaylistsServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *PutPlaylistsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /playlists/{playlistUid}][%d] putPlaylistsServiceUnavailable  %+v", 503, o.Payload)
}
func (o *PutPlaylistsServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutPlaylistsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
