// Code generated by go-swagger; DO NOT EDIT.

package playlists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/MattX/verizon-cloud-go/models"
)

// DeletePlaylistReader is a Reader for the DeletePlaylist structure.
type DeletePlaylistReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePlaylistReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeletePlaylistOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeletePlaylistUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeletePlaylistForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePlaylistNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeletePlaylistServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeletePlaylistOK creates a DeletePlaylistOK with default headers values
func NewDeletePlaylistOK() *DeletePlaylistOK {
	return &DeletePlaylistOK{}
}

/* DeletePlaylistOK describes a response with status code 200, with default header values.

OK
*/
type DeletePlaylistOK struct {
}

func (o *DeletePlaylistOK) Error() string {
	return fmt.Sprintf("[DELETE /playlists/{playlistUid}][%d] deletePlaylistOK ", 200)
}

func (o *DeletePlaylistOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePlaylistUnauthorized creates a DeletePlaylistUnauthorized with default headers values
func NewDeletePlaylistUnauthorized() *DeletePlaylistUnauthorized {
	return &DeletePlaylistUnauthorized{}
}

/* DeletePlaylistUnauthorized describes a response with status code 401, with default header values.

[Unauthorized] Bearer token is missing, expired, or invalid.
*/
type DeletePlaylistUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DeletePlaylistUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /playlists/{playlistUid}][%d] deletePlaylistUnauthorized  %+v", 401, o.Payload)
}
func (o *DeletePlaylistUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeletePlaylistUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePlaylistForbidden creates a DeletePlaylistForbidden with default headers values
func NewDeletePlaylistForbidden() *DeletePlaylistForbidden {
	return &DeletePlaylistForbidden{}
}

/* DeletePlaylistForbidden describes a response with status code 403, with default header values.

[Forbidden] User is not authorized to access storage APIs.
*/
type DeletePlaylistForbidden struct {
	Payload *models.ErrorResponse
}

func (o *DeletePlaylistForbidden) Error() string {
	return fmt.Sprintf("[DELETE /playlists/{playlistUid}][%d] deletePlaylistForbidden  %+v", 403, o.Payload)
}
func (o *DeletePlaylistForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeletePlaylistForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePlaylistNotFound creates a DeletePlaylistNotFound with default headers values
func NewDeletePlaylistNotFound() *DeletePlaylistNotFound {
	return &DeletePlaylistNotFound{}
}

/* DeletePlaylistNotFound describes a response with status code 404, with default header values.

[Not Found] Resource not found.
*/
type DeletePlaylistNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DeletePlaylistNotFound) Error() string {
	return fmt.Sprintf("[DELETE /playlists/{playlistUid}][%d] deletePlaylistNotFound  %+v", 404, o.Payload)
}
func (o *DeletePlaylistNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeletePlaylistNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePlaylistServiceUnavailable creates a DeletePlaylistServiceUnavailable with default headers values
func NewDeletePlaylistServiceUnavailable() *DeletePlaylistServiceUnavailable {
	return &DeletePlaylistServiceUnavailable{}
}

/* DeletePlaylistServiceUnavailable describes a response with status code 503, with default header values.

[Service Unavailable] See response body for more detail.
*/
type DeletePlaylistServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *DeletePlaylistServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /playlists/{playlistUid}][%d] deletePlaylistServiceUnavailable  %+v", 503, o.Payload)
}
func (o *DeletePlaylistServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeletePlaylistServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
