// Code generated by go-swagger; DO NOT EDIT.

package files_and_folders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetThumbnailsParams creates a new GetThumbnailsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetThumbnailsParams() *GetThumbnailsParams {
	return &GetThumbnailsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetThumbnailsParamsWithTimeout creates a new GetThumbnailsParams object
// with the ability to set a timeout on a request.
func NewGetThumbnailsParamsWithTimeout(timeout time.Duration) *GetThumbnailsParams {
	return &GetThumbnailsParams{
		timeout: timeout,
	}
}

// NewGetThumbnailsParamsWithContext creates a new GetThumbnailsParams object
// with the ability to set a context for a request.
func NewGetThumbnailsParamsWithContext(ctx context.Context) *GetThumbnailsParams {
	return &GetThumbnailsParams{
		Context: ctx,
	}
}

// NewGetThumbnailsParamsWithHTTPClient creates a new GetThumbnailsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetThumbnailsParamsWithHTTPClient(client *http.Client) *GetThumbnailsParams {
	return &GetThumbnailsParams{
		HTTPClient: client,
	}
}

/* GetThumbnailsParams contains all the parameters to send to the API endpoint
   for the get thumbnails operation.

   Typically these are written to a http.Request.
*/
type GetThumbnailsParams struct {

	/* ContentToken.

	   The file's content token (obtained from a call to /metadata or /fullview).
	*/
	ContentToken string

	/* Size.

	   Thumbnail size: 'xs' (24x24), 's' (64x64), 'm' (128x128) or 'l' (320x320). Either 'size' or 'th' and 'tw' are required.
	*/
	Size *string

	/* Th.

	   Thumbnail height (in pixels). Either 'size' or 'th' and 'tw' are required.
	*/
	Th *int64

	/* Tw.

	   Thumbnail width (in pixels). Either 'size' or 'th' and 'tw' are required.
	*/
	Tw *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get thumbnails params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetThumbnailsParams) WithDefaults() *GetThumbnailsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get thumbnails params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetThumbnailsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get thumbnails params
func (o *GetThumbnailsParams) WithTimeout(timeout time.Duration) *GetThumbnailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get thumbnails params
func (o *GetThumbnailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get thumbnails params
func (o *GetThumbnailsParams) WithContext(ctx context.Context) *GetThumbnailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get thumbnails params
func (o *GetThumbnailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get thumbnails params
func (o *GetThumbnailsParams) WithHTTPClient(client *http.Client) *GetThumbnailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get thumbnails params
func (o *GetThumbnailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentToken adds the contentToken to the get thumbnails params
func (o *GetThumbnailsParams) WithContentToken(contentToken string) *GetThumbnailsParams {
	o.SetContentToken(contentToken)
	return o
}

// SetContentToken adds the contentToken to the get thumbnails params
func (o *GetThumbnailsParams) SetContentToken(contentToken string) {
	o.ContentToken = contentToken
}

// WithSize adds the size to the get thumbnails params
func (o *GetThumbnailsParams) WithSize(size *string) *GetThumbnailsParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get thumbnails params
func (o *GetThumbnailsParams) SetSize(size *string) {
	o.Size = size
}

// WithTh adds the th to the get thumbnails params
func (o *GetThumbnailsParams) WithTh(th *int64) *GetThumbnailsParams {
	o.SetTh(th)
	return o
}

// SetTh adds the th to the get thumbnails params
func (o *GetThumbnailsParams) SetTh(th *int64) {
	o.Th = th
}

// WithTw adds the tw to the get thumbnails params
func (o *GetThumbnailsParams) WithTw(tw *int64) *GetThumbnailsParams {
	o.SetTw(tw)
	return o
}

// SetTw adds the tw to the get thumbnails params
func (o *GetThumbnailsParams) SetTw(tw *int64) {
	o.Tw = tw
}

// WriteToRequest writes these params to a swagger request
func (o *GetThumbnailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param content-token
	if err := r.SetPathParam("content-token", o.ContentToken); err != nil {
		return err
	}

	if o.Size != nil {

		// query param size
		var qrSize string

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := qrSize
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Th != nil {

		// query param th
		var qrTh int64

		if o.Th != nil {
			qrTh = *o.Th
		}
		qTh := swag.FormatInt64(qrTh)
		if qTh != "" {

			if err := r.SetQueryParam("th", qTh); err != nil {
				return err
			}
		}
	}

	if o.Tw != nil {

		// query param tw
		var qrTw int64

		if o.Tw != nil {
			qrTw = *o.Tw
		}
		qTw := swag.FormatInt64(qrTw)
		if qTw != "" {

			if err := r.SetQueryParam("tw", qTw); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
