// Code generated by go-swagger; DO NOT EDIT.

package files_and_folders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/MattX/verizon-cloud-go/client/models"
)

// RestoreTrashReader is a Reader for the RestoreTrash structure.
type RestoreTrashReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestoreTrashReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRestoreTrashNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRestoreTrashBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRestoreTrashUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRestoreTrashForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewRestoreTrashServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRestoreTrashNoContent creates a RestoreTrashNoContent with default headers values
func NewRestoreTrashNoContent() *RestoreTrashNoContent {
	return &RestoreTrashNoContent{}
}

/* RestoreTrashNoContent describes a response with status code 204, with default header values.

OK
*/
type RestoreTrashNoContent struct {
}

func (o *RestoreTrashNoContent) Error() string {
	return fmt.Sprintf("[POST /fops/restore][%d] restoreTrashNoContent ", 204)
}

func (o *RestoreTrashNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRestoreTrashBadRequest creates a RestoreTrashBadRequest with default headers values
func NewRestoreTrashBadRequest() *RestoreTrashBadRequest {
	return &RestoreTrashBadRequest{}
}

/* RestoreTrashBadRequest describes a response with status code 400, with default header values.

[Bad Request] Path is invalid.
*/
type RestoreTrashBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *RestoreTrashBadRequest) Error() string {
	return fmt.Sprintf("[POST /fops/restore][%d] restoreTrashBadRequest  %+v", 400, o.Payload)
}
func (o *RestoreTrashBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RestoreTrashBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreTrashUnauthorized creates a RestoreTrashUnauthorized with default headers values
func NewRestoreTrashUnauthorized() *RestoreTrashUnauthorized {
	return &RestoreTrashUnauthorized{}
}

/* RestoreTrashUnauthorized describes a response with status code 401, with default header values.

[Unauthorized] Bearer token is missing, expired, or invalid.
*/
type RestoreTrashUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *RestoreTrashUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fops/restore][%d] restoreTrashUnauthorized  %+v", 401, o.Payload)
}
func (o *RestoreTrashUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RestoreTrashUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreTrashForbidden creates a RestoreTrashForbidden with default headers values
func NewRestoreTrashForbidden() *RestoreTrashForbidden {
	return &RestoreTrashForbidden{}
}

/* RestoreTrashForbidden describes a response with status code 403, with default header values.

[Forbidden] User is not authorized to access storage APIs.
*/
type RestoreTrashForbidden struct {
	Payload *models.ErrorResponse
}

func (o *RestoreTrashForbidden) Error() string {
	return fmt.Sprintf("[POST /fops/restore][%d] restoreTrashForbidden  %+v", 403, o.Payload)
}
func (o *RestoreTrashForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RestoreTrashForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreTrashServiceUnavailable creates a RestoreTrashServiceUnavailable with default headers values
func NewRestoreTrashServiceUnavailable() *RestoreTrashServiceUnavailable {
	return &RestoreTrashServiceUnavailable{}
}

/* RestoreTrashServiceUnavailable describes a response with status code 503, with default header values.

[Service Unavailable] See response body for more detail.
*/
type RestoreTrashServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *RestoreTrashServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /fops/restore][%d] restoreTrashServiceUnavailable  %+v", 503, o.Payload)
}
func (o *RestoreTrashServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RestoreTrashServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
