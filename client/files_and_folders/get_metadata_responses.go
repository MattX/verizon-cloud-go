// Code generated by go-swagger; DO NOT EDIT.

package files_and_folders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mattx/verizon-cloud-go/client/models"
)

// GetMetadataReader is a Reader for the GetMetadata structure.
type GetMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMetadataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetMetadataServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMetadataOK creates a GetMetadataOK with default headers values
func NewGetMetadataOK() *GetMetadataOK {
	return &GetMetadataOK{}
}

/* GetMetadataOK describes a response with status code 200, with default header values.

A metadata response object
*/
type GetMetadataOK struct {
	Payload *models.MetadataResponse
}

func (o *GetMetadataOK) Error() string {
	return fmt.Sprintf("[GET /metadata][%d] getMetadataOK  %+v", 200, o.Payload)
}
func (o *GetMetadataOK) GetPayload() *models.MetadataResponse {
	return o.Payload
}

func (o *GetMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetadataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetadataBadRequest creates a GetMetadataBadRequest with default headers values
func NewGetMetadataBadRequest() *GetMetadataBadRequest {
	return &GetMetadataBadRequest{}
}

/* GetMetadataBadRequest describes a response with status code 400, with default header values.

[Bad Request] Query parameters missing or invalid.
*/
type GetMetadataBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetMetadataBadRequest) Error() string {
	return fmt.Sprintf("[GET /metadata][%d] getMetadataBadRequest  %+v", 400, o.Payload)
}
func (o *GetMetadataBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetadataUnauthorized creates a GetMetadataUnauthorized with default headers values
func NewGetMetadataUnauthorized() *GetMetadataUnauthorized {
	return &GetMetadataUnauthorized{}
}

/* GetMetadataUnauthorized describes a response with status code 401, with default header values.

[Unauthorized] Bearer token is missing, expired, or invalid.
*/
type GetMetadataUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *GetMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /metadata][%d] getMetadataUnauthorized  %+v", 401, o.Payload)
}
func (o *GetMetadataUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetadataForbidden creates a GetMetadataForbidden with default headers values
func NewGetMetadataForbidden() *GetMetadataForbidden {
	return &GetMetadataForbidden{}
}

/* GetMetadataForbidden describes a response with status code 403, with default header values.

[Forbidden] User is not authorized to access storage APIs.
*/
type GetMetadataForbidden struct {
	Payload *models.ErrorResponse
}

func (o *GetMetadataForbidden) Error() string {
	return fmt.Sprintf("[GET /metadata][%d] getMetadataForbidden  %+v", 403, o.Payload)
}
func (o *GetMetadataForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetMetadataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetadataNotFound creates a GetMetadataNotFound with default headers values
func NewGetMetadataNotFound() *GetMetadataNotFound {
	return &GetMetadataNotFound{}
}

/* GetMetadataNotFound describes a response with status code 404, with default header values.

[Not Found] File was not found.
*/
type GetMetadataNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetMetadataNotFound) Error() string {
	return fmt.Sprintf("[GET /metadata][%d] getMetadataNotFound  %+v", 404, o.Payload)
}
func (o *GetMetadataNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetadataServiceUnavailable creates a GetMetadataServiceUnavailable with default headers values
func NewGetMetadataServiceUnavailable() *GetMetadataServiceUnavailable {
	return &GetMetadataServiceUnavailable{}
}

/* GetMetadataServiceUnavailable describes a response with status code 503, with default header values.

[Service Unavailable] See response body for more detail.
*/
type GetMetadataServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *GetMetadataServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /metadata][%d] getMetadataServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetMetadataServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetMetadataServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
