// Code generated by go-swagger; DO NOT EDIT.

package files_and_folders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteVirtualFolderParams creates a new DeleteVirtualFolderParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteVirtualFolderParams() *DeleteVirtualFolderParams {
	return &DeleteVirtualFolderParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteVirtualFolderParamsWithTimeout creates a new DeleteVirtualFolderParams object
// with the ability to set a timeout on a request.
func NewDeleteVirtualFolderParamsWithTimeout(timeout time.Duration) *DeleteVirtualFolderParams {
	return &DeleteVirtualFolderParams{
		timeout: timeout,
	}
}

// NewDeleteVirtualFolderParamsWithContext creates a new DeleteVirtualFolderParams object
// with the ability to set a context for a request.
func NewDeleteVirtualFolderParamsWithContext(ctx context.Context) *DeleteVirtualFolderParams {
	return &DeleteVirtualFolderParams{
		Context: ctx,
	}
}

// NewDeleteVirtualFolderParamsWithHTTPClient creates a new DeleteVirtualFolderParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteVirtualFolderParamsWithHTTPClient(client *http.Client) *DeleteVirtualFolderParams {
	return &DeleteVirtualFolderParams{
		HTTPClient: client,
	}
}

/* DeleteVirtualFolderParams contains all the parameters to send to the API endpoint
   for the delete virtual folder operation.

   Typically these are written to a http.Request.
*/
type DeleteVirtualFolderParams struct {

	/* Force.

	   If 'false', does not delete if the virtual folder has any active or deleted file/folder(s). If 'true', deletes the virtual folder if it has references to only deleted file/folder(s). Defaults to false.
	*/
	Force *bool

	/* Name.

	   Name of the virtual folder.
	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete virtual folder params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteVirtualFolderParams) WithDefaults() *DeleteVirtualFolderParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete virtual folder params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteVirtualFolderParams) SetDefaults() {
	var (
		forceDefault = bool(false)
	)

	val := DeleteVirtualFolderParams{
		Force: &forceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete virtual folder params
func (o *DeleteVirtualFolderParams) WithTimeout(timeout time.Duration) *DeleteVirtualFolderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete virtual folder params
func (o *DeleteVirtualFolderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete virtual folder params
func (o *DeleteVirtualFolderParams) WithContext(ctx context.Context) *DeleteVirtualFolderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete virtual folder params
func (o *DeleteVirtualFolderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete virtual folder params
func (o *DeleteVirtualFolderParams) WithHTTPClient(client *http.Client) *DeleteVirtualFolderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete virtual folder params
func (o *DeleteVirtualFolderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForce adds the force to the delete virtual folder params
func (o *DeleteVirtualFolderParams) WithForce(force *bool) *DeleteVirtualFolderParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the delete virtual folder params
func (o *DeleteVirtualFolderParams) SetForce(force *bool) {
	o.Force = force
}

// WithName adds the name to the delete virtual folder params
func (o *DeleteVirtualFolderParams) WithName(name string) *DeleteVirtualFolderParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the delete virtual folder params
func (o *DeleteVirtualFolderParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteVirtualFolderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Force != nil {

		// query param force
		var qrForce bool

		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {

			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {

		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
