// Code generated by go-swagger; DO NOT EDIT.

package files_and_folders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/MattX/verizon-cloud-go/client/models"
)

// RetrieveTrashReader is a Reader for the RetrieveTrash structure.
type RetrieveTrashReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetrieveTrashReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRetrieveTrashOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRetrieveTrashBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRetrieveTrashUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRetrieveTrashForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRetrieveTrashNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewRetrieveTrashServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRetrieveTrashOK creates a RetrieveTrashOK with default headers values
func NewRetrieveTrashOK() *RetrieveTrashOK {
	return &RetrieveTrashOK{}
}

/* RetrieveTrashOK describes a response with status code 200, with default header values.

OK
*/
type RetrieveTrashOK struct {
	Payload *models.TrashResponse
}

func (o *RetrieveTrashOK) Error() string {
	return fmt.Sprintf("[GET /trash][%d] retrieveTrashOK  %+v", 200, o.Payload)
}
func (o *RetrieveTrashOK) GetPayload() *models.TrashResponse {
	return o.Payload
}

func (o *RetrieveTrashOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TrashResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveTrashBadRequest creates a RetrieveTrashBadRequest with default headers values
func NewRetrieveTrashBadRequest() *RetrieveTrashBadRequest {
	return &RetrieveTrashBadRequest{}
}

/* RetrieveTrashBadRequest describes a response with status code 400, with default header values.

[Bad Request] Query parameters missing or invalid.
*/
type RetrieveTrashBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *RetrieveTrashBadRequest) Error() string {
	return fmt.Sprintf("[GET /trash][%d] retrieveTrashBadRequest  %+v", 400, o.Payload)
}
func (o *RetrieveTrashBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RetrieveTrashBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveTrashUnauthorized creates a RetrieveTrashUnauthorized with default headers values
func NewRetrieveTrashUnauthorized() *RetrieveTrashUnauthorized {
	return &RetrieveTrashUnauthorized{}
}

/* RetrieveTrashUnauthorized describes a response with status code 401, with default header values.

[Unauthorized] Bearer token is missing, expired, or invalid.
*/
type RetrieveTrashUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *RetrieveTrashUnauthorized) Error() string {
	return fmt.Sprintf("[GET /trash][%d] retrieveTrashUnauthorized  %+v", 401, o.Payload)
}
func (o *RetrieveTrashUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RetrieveTrashUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveTrashForbidden creates a RetrieveTrashForbidden with default headers values
func NewRetrieveTrashForbidden() *RetrieveTrashForbidden {
	return &RetrieveTrashForbidden{}
}

/* RetrieveTrashForbidden describes a response with status code 403, with default header values.

[Forbidden] User is not authorized to access storage APIs.
*/
type RetrieveTrashForbidden struct {
	Payload *models.ErrorResponse
}

func (o *RetrieveTrashForbidden) Error() string {
	return fmt.Sprintf("[GET /trash][%d] retrieveTrashForbidden  %+v", 403, o.Payload)
}
func (o *RetrieveTrashForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RetrieveTrashForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveTrashNotFound creates a RetrieveTrashNotFound with default headers values
func NewRetrieveTrashNotFound() *RetrieveTrashNotFound {
	return &RetrieveTrashNotFound{}
}

/* RetrieveTrashNotFound describes a response with status code 404, with default header values.

[Not Found] Resource not found.
*/
type RetrieveTrashNotFound struct {
	Payload *models.ErrorResponse
}

func (o *RetrieveTrashNotFound) Error() string {
	return fmt.Sprintf("[GET /trash][%d] retrieveTrashNotFound  %+v", 404, o.Payload)
}
func (o *RetrieveTrashNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RetrieveTrashNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveTrashServiceUnavailable creates a RetrieveTrashServiceUnavailable with default headers values
func NewRetrieveTrashServiceUnavailable() *RetrieveTrashServiceUnavailable {
	return &RetrieveTrashServiceUnavailable{}
}

/* RetrieveTrashServiceUnavailable describes a response with status code 503, with default header values.

[Service Unavailable] See response body for more detail.
*/
type RetrieveTrashServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *RetrieveTrashServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /trash][%d] retrieveTrashServiceUnavailable  %+v", 503, o.Payload)
}
func (o *RetrieveTrashServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RetrieveTrashServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
