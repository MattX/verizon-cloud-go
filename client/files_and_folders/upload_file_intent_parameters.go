// Code generated by go-swagger; DO NOT EDIT.

package files_and_folders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUploadFileIntentParams creates a new UploadFileIntentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadFileIntentParams() *UploadFileIntentParams {
	return &UploadFileIntentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadFileIntentParamsWithTimeout creates a new UploadFileIntentParams object
// with the ability to set a timeout on a request.
func NewUploadFileIntentParamsWithTimeout(timeout time.Duration) *UploadFileIntentParams {
	return &UploadFileIntentParams{
		timeout: timeout,
	}
}

// NewUploadFileIntentParamsWithContext creates a new UploadFileIntentParams object
// with the ability to set a context for a request.
func NewUploadFileIntentParamsWithContext(ctx context.Context) *UploadFileIntentParams {
	return &UploadFileIntentParams{
		Context: ctx,
	}
}

// NewUploadFileIntentParamsWithHTTPClient creates a new UploadFileIntentParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadFileIntentParamsWithHTTPClient(client *http.Client) *UploadFileIntentParams {
	return &UploadFileIntentParams{
		HTTPClient: client,
	}
}

/* UploadFileIntentParams contains all the parameters to send to the API endpoint
   for the upload file intent operation.

   Typically these are written to a http.Request.
*/
type UploadFileIntentParams struct {

	/* Checksum.

	   Checksum of the file/chunk.
	*/
	Checksum string

	/* Chunk.

	   Should be set to false, in case the file binary has to be uploaded with single request. Otherwise should be set to true when file binary has to be uploaded in multiple request.
	*/
	Chunk *bool

	/* Name.

	   Name of the file to be uploaded.
	*/
	Name string

	/* Path.

	   The path to the folder where file has to be uploaded.
	*/
	Path string

	/* Size.

	   Size of the file to be uploaded.
	*/
	Size int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload file intent params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFileIntentParams) WithDefaults() *UploadFileIntentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload file intent params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFileIntentParams) SetDefaults() {
	var (
		chunkDefault = bool(false)
	)

	val := UploadFileIntentParams{
		Chunk: &chunkDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the upload file intent params
func (o *UploadFileIntentParams) WithTimeout(timeout time.Duration) *UploadFileIntentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload file intent params
func (o *UploadFileIntentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload file intent params
func (o *UploadFileIntentParams) WithContext(ctx context.Context) *UploadFileIntentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload file intent params
func (o *UploadFileIntentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload file intent params
func (o *UploadFileIntentParams) WithHTTPClient(client *http.Client) *UploadFileIntentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload file intent params
func (o *UploadFileIntentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChecksum adds the checksum to the upload file intent params
func (o *UploadFileIntentParams) WithChecksum(checksum string) *UploadFileIntentParams {
	o.SetChecksum(checksum)
	return o
}

// SetChecksum adds the checksum to the upload file intent params
func (o *UploadFileIntentParams) SetChecksum(checksum string) {
	o.Checksum = checksum
}

// WithChunk adds the chunk to the upload file intent params
func (o *UploadFileIntentParams) WithChunk(chunk *bool) *UploadFileIntentParams {
	o.SetChunk(chunk)
	return o
}

// SetChunk adds the chunk to the upload file intent params
func (o *UploadFileIntentParams) SetChunk(chunk *bool) {
	o.Chunk = chunk
}

// WithName adds the name to the upload file intent params
func (o *UploadFileIntentParams) WithName(name string) *UploadFileIntentParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the upload file intent params
func (o *UploadFileIntentParams) SetName(name string) {
	o.Name = name
}

// WithPath adds the path to the upload file intent params
func (o *UploadFileIntentParams) WithPath(path string) *UploadFileIntentParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the upload file intent params
func (o *UploadFileIntentParams) SetPath(path string) {
	o.Path = path
}

// WithSize adds the size to the upload file intent params
func (o *UploadFileIntentParams) WithSize(size int64) *UploadFileIntentParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the upload file intent params
func (o *UploadFileIntentParams) SetSize(size int64) {
	o.Size = size
}

// WriteToRequest writes these params to a swagger request
func (o *UploadFileIntentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param checksum
	qrChecksum := o.Checksum
	qChecksum := qrChecksum
	if qChecksum != "" {

		if err := r.SetQueryParam("checksum", qChecksum); err != nil {
			return err
		}
	}

	if o.Chunk != nil {

		// query param chunk
		var qrChunk bool

		if o.Chunk != nil {
			qrChunk = *o.Chunk
		}
		qChunk := swag.FormatBool(qrChunk)
		if qChunk != "" {

			if err := r.SetQueryParam("chunk", qChunk); err != nil {
				return err
			}
		}
	}

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {

		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {

		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	// query param size
	qrSize := o.Size
	qSize := swag.FormatInt64(qrSize)
	if qSize != "" {

		if err := r.SetQueryParam("size", qSize); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
