// Code generated by go-swagger; DO NOT EDIT.

package files_and_folders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/MattX/verizon-cloud-go/models"
)

// UploadFileCreateReader is a Reader for the UploadFileCreate structure.
type UploadFileCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadFileCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUploadFileCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadFileCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUploadFileCreateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadFileCreateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUploadFileCreateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadFileCreateCreated creates a UploadFileCreateCreated with default headers values
func NewUploadFileCreateCreated() *UploadFileCreateCreated {
	return &UploadFileCreateCreated{}
}

/* UploadFileCreateCreated describes a response with status code 201, with default header values.

Created
*/
type UploadFileCreateCreated struct {
	Payload *models.FileMetadata
}

func (o *UploadFileCreateCreated) Error() string {
	return fmt.Sprintf("[POST /commit/{uploadid}][%d] uploadFileCreateCreated  %+v", 201, o.Payload)
}
func (o *UploadFileCreateCreated) GetPayload() *models.FileMetadata {
	return o.Payload
}

func (o *UploadFileCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FileMetadata)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileCreateBadRequest creates a UploadFileCreateBadRequest with default headers values
func NewUploadFileCreateBadRequest() *UploadFileCreateBadRequest {
	return &UploadFileCreateBadRequest{}
}

/* UploadFileCreateBadRequest describes a response with status code 400, with default header values.

[Bad Request] Query parameters missing or invalid.
*/
type UploadFileCreateBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *UploadFileCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /commit/{uploadid}][%d] uploadFileCreateBadRequest  %+v", 400, o.Payload)
}
func (o *UploadFileCreateBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UploadFileCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileCreateUnauthorized creates a UploadFileCreateUnauthorized with default headers values
func NewUploadFileCreateUnauthorized() *UploadFileCreateUnauthorized {
	return &UploadFileCreateUnauthorized{}
}

/* UploadFileCreateUnauthorized describes a response with status code 401, with default header values.

[Unauthorized] Bearer token is missing, expired, or invalid.
*/
type UploadFileCreateUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *UploadFileCreateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /commit/{uploadid}][%d] uploadFileCreateUnauthorized  %+v", 401, o.Payload)
}
func (o *UploadFileCreateUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UploadFileCreateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileCreateForbidden creates a UploadFileCreateForbidden with default headers values
func NewUploadFileCreateForbidden() *UploadFileCreateForbidden {
	return &UploadFileCreateForbidden{}
}

/* UploadFileCreateForbidden describes a response with status code 403, with default header values.

[Forbidden] User is not authorized to access storage APIs.
*/
type UploadFileCreateForbidden struct {
	Payload *models.ErrorResponse
}

func (o *UploadFileCreateForbidden) Error() string {
	return fmt.Sprintf("[POST /commit/{uploadid}][%d] uploadFileCreateForbidden  %+v", 403, o.Payload)
}
func (o *UploadFileCreateForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UploadFileCreateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileCreateServiceUnavailable creates a UploadFileCreateServiceUnavailable with default headers values
func NewUploadFileCreateServiceUnavailable() *UploadFileCreateServiceUnavailable {
	return &UploadFileCreateServiceUnavailable{}
}

/* UploadFileCreateServiceUnavailable describes a response with status code 503, with default header values.

[Service Unavailable] See response body for more detail.
*/
type UploadFileCreateServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *UploadFileCreateServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /commit/{uploadid}][%d] uploadFileCreateServiceUnavailable  %+v", 503, o.Payload)
}
func (o *UploadFileCreateServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UploadFileCreateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
