// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/mattx/verizon-cloud-go/client/models"
)

// UpdateContactReader is a Reader for the UpdateContact structure.
type UpdateContactReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateContactReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateContactOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateContactBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateContactUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateContactNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateContactConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateContactServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateContactOK creates a UpdateContactOK with default headers values
func NewUpdateContactOK() *UpdateContactOK {
	return &UpdateContactOK{}
}

/* UpdateContactOK describes a response with status code 200, with default header values.

OK
*/
type UpdateContactOK struct {
	Payload *UpdateContactOKBody
}

func (o *UpdateContactOK) Error() string {
	return fmt.Sprintf("[PUT /contacts/{contactID}][%d] updateContactOK  %+v", 200, o.Payload)
}
func (o *UpdateContactOK) GetPayload() *UpdateContactOKBody {
	return o.Payload
}

func (o *UpdateContactOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateContactOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContactBadRequest creates a UpdateContactBadRequest with default headers values
func NewUpdateContactBadRequest() *UpdateContactBadRequest {
	return &UpdateContactBadRequest{}
}

/* UpdateContactBadRequest describes a response with status code 400, with default header values.

[Bad Request] Query parameters missing or invalid.
*/
type UpdateContactBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *UpdateContactBadRequest) Error() string {
	return fmt.Sprintf("[PUT /contacts/{contactID}][%d] updateContactBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateContactBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateContactBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContactUnauthorized creates a UpdateContactUnauthorized with default headers values
func NewUpdateContactUnauthorized() *UpdateContactUnauthorized {
	return &UpdateContactUnauthorized{}
}

/* UpdateContactUnauthorized describes a response with status code 401, with default header values.

[Unauthorized] Bearer token is missing, expired, or invalid.
*/
type UpdateContactUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *UpdateContactUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /contacts/{contactID}][%d] updateContactUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateContactUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateContactUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContactNotFound creates a UpdateContactNotFound with default headers values
func NewUpdateContactNotFound() *UpdateContactNotFound {
	return &UpdateContactNotFound{}
}

/* UpdateContactNotFound describes a response with status code 404, with default header values.

[Not Found] Resource not found.
*/
type UpdateContactNotFound struct {
	Payload *models.ErrorResponse
}

func (o *UpdateContactNotFound) Error() string {
	return fmt.Sprintf("[PUT /contacts/{contactID}][%d] updateContactNotFound  %+v", 404, o.Payload)
}
func (o *UpdateContactNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateContactNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContactConflict creates a UpdateContactConflict with default headers values
func NewUpdateContactConflict() *UpdateContactConflict {
	return &UpdateContactConflict{}
}

/* UpdateContactConflict describes a response with status code 409, with default header values.

[Conflict] Version not matching.
*/
type UpdateContactConflict struct {
	Payload *models.ErrorResponse
}

func (o *UpdateContactConflict) Error() string {
	return fmt.Sprintf("[PUT /contacts/{contactID}][%d] updateContactConflict  %+v", 409, o.Payload)
}
func (o *UpdateContactConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateContactConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContactServiceUnavailable creates a UpdateContactServiceUnavailable with default headers values
func NewUpdateContactServiceUnavailable() *UpdateContactServiceUnavailable {
	return &UpdateContactServiceUnavailable{}
}

/* UpdateContactServiceUnavailable describes a response with status code 503, with default header values.

[Service Unavailable] See response body for more detail.
*/
type UpdateContactServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *UpdateContactServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /contacts/{contactID}][%d] updateContactServiceUnavailable  %+v", 503, o.Payload)
}
func (o *UpdateContactServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateContactServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateContactOKBody update contact o k body
swagger:model UpdateContactOKBody
*/
type UpdateContactOKBody struct {

	// Unique identifier for the contact
	// Required: true
	ID *string `json:"id"`

	// Contact version.
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this update contact o k body
func (o *UpdateContactOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateContactOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("updateContactOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateContactOKBody) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("updateContactOK"+"."+"version", "body", o.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update contact o k body based on context it is used
func (o *UpdateContactOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateContactOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateContactOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateContactOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
