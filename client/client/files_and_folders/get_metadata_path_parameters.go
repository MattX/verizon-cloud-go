// Code generated by go-swagger; DO NOT EDIT.

package files_and_folders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetMetadataPathParams creates a new GetMetadataPathParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMetadataPathParams() *GetMetadataPathParams {
	return &GetMetadataPathParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMetadataPathParamsWithTimeout creates a new GetMetadataPathParams object
// with the ability to set a timeout on a request.
func NewGetMetadataPathParamsWithTimeout(timeout time.Duration) *GetMetadataPathParams {
	return &GetMetadataPathParams{
		timeout: timeout,
	}
}

// NewGetMetadataPathParamsWithContext creates a new GetMetadataPathParams object
// with the ability to set a context for a request.
func NewGetMetadataPathParamsWithContext(ctx context.Context) *GetMetadataPathParams {
	return &GetMetadataPathParams{
		Context: ctx,
	}
}

// NewGetMetadataPathParamsWithHTTPClient creates a new GetMetadataPathParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMetadataPathParamsWithHTTPClient(client *http.Client) *GetMetadataPathParams {
	return &GetMetadataPathParams{
		HTTPClient: client,
	}
}

/* GetMetadataPathParams contains all the parameters to send to the API endpoint
   for the get metadata path operation.

   Typically these are written to a http.Request.
*/
type GetMetadataPathParams struct {

	/* Count.

	   Maximum children to include in a paginated response.  Defaulted to 20 if page is specified.
	*/
	Count *int64

	/* Filter.

	   Set to 'file' or 'folder', to include only those types of items in the response.
	*/
	Filter *string

	/* IncludeDeleted.

	   if true, response will include deleted files and folders. Default is false.
	*/
	IncludeDeleted *bool

	/* Page.

	   Page number to return, for paginated responses. Defaulted to 1 if count is specified.
	*/
	Page *int64

	/* Path.

	   The path to the file or folder.
	*/
	Path string

	/* Sort.

	   Specify sort order for response. Syntax is :'{field}+{asc|desc}'.  Valid values for 'field' are: name, versionCreated, size, extension, album, artist, captureDate, contentType, creationDate, genre, priority, title, timelineDate
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get metadata path params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMetadataPathParams) WithDefaults() *GetMetadataPathParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get metadata path params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMetadataPathParams) SetDefaults() {
	var (
		includeDeletedDefault = bool(false)
	)

	val := GetMetadataPathParams{
		IncludeDeleted: &includeDeletedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get metadata path params
func (o *GetMetadataPathParams) WithTimeout(timeout time.Duration) *GetMetadataPathParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get metadata path params
func (o *GetMetadataPathParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get metadata path params
func (o *GetMetadataPathParams) WithContext(ctx context.Context) *GetMetadataPathParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get metadata path params
func (o *GetMetadataPathParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get metadata path params
func (o *GetMetadataPathParams) WithHTTPClient(client *http.Client) *GetMetadataPathParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get metadata path params
func (o *GetMetadataPathParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get metadata path params
func (o *GetMetadataPathParams) WithCount(count *int64) *GetMetadataPathParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get metadata path params
func (o *GetMetadataPathParams) SetCount(count *int64) {
	o.Count = count
}

// WithFilter adds the filter to the get metadata path params
func (o *GetMetadataPathParams) WithFilter(filter *string) *GetMetadataPathParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get metadata path params
func (o *GetMetadataPathParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithIncludeDeleted adds the includeDeleted to the get metadata path params
func (o *GetMetadataPathParams) WithIncludeDeleted(includeDeleted *bool) *GetMetadataPathParams {
	o.SetIncludeDeleted(includeDeleted)
	return o
}

// SetIncludeDeleted adds the includeDeleted to the get metadata path params
func (o *GetMetadataPathParams) SetIncludeDeleted(includeDeleted *bool) {
	o.IncludeDeleted = includeDeleted
}

// WithPage adds the page to the get metadata path params
func (o *GetMetadataPathParams) WithPage(page *int64) *GetMetadataPathParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get metadata path params
func (o *GetMetadataPathParams) SetPage(page *int64) {
	o.Page = page
}

// WithPath adds the path to the get metadata path params
func (o *GetMetadataPathParams) WithPath(path string) *GetMetadataPathParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get metadata path params
func (o *GetMetadataPathParams) SetPath(path string) {
	o.Path = path
}

// WithSort adds the sort to the get metadata path params
func (o *GetMetadataPathParams) WithSort(sort *string) *GetMetadataPathParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get metadata path params
func (o *GetMetadataPathParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetMetadataPathParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.IncludeDeleted != nil {

		// query param include_deleted
		var qrIncludeDeleted bool

		if o.IncludeDeleted != nil {
			qrIncludeDeleted = *o.IncludeDeleted
		}
		qIncludeDeleted := swag.FormatBool(qrIncludeDeleted)
		if qIncludeDeleted != "" {

			if err := r.SetQueryParam("include_deleted", qIncludeDeleted); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	// path param path
	if err := r.SetPathParam("path", o.Path); err != nil {
		return err
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
