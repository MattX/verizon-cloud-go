// Code generated by go-swagger; DO NOT EDIT.

package shares

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mattx/verizon-cloud-go/client/models"
)

// DeleteShareReader is a Reader for the DeleteShare structure.
type DeleteShareReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteShareReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteShareNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteShareUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteShareForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteShareNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteShareServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteShareNoContent creates a DeleteShareNoContent with default headers values
func NewDeleteShareNoContent() *DeleteShareNoContent {
	return &DeleteShareNoContent{}
}

/* DeleteShareNoContent describes a response with status code 204, with default header values.

OK
*/
type DeleteShareNoContent struct {
}

func (o *DeleteShareNoContent) Error() string {
	return fmt.Sprintf("[DELETE /shares/{shareUid}][%d] deleteShareNoContent ", 204)
}

func (o *DeleteShareNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteShareUnauthorized creates a DeleteShareUnauthorized with default headers values
func NewDeleteShareUnauthorized() *DeleteShareUnauthorized {
	return &DeleteShareUnauthorized{}
}

/* DeleteShareUnauthorized describes a response with status code 401, with default header values.

[Unauthorized] Bearer token is missing, expired, or invalid.
*/
type DeleteShareUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DeleteShareUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /shares/{shareUid}][%d] deleteShareUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteShareUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteShareUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteShareForbidden creates a DeleteShareForbidden with default headers values
func NewDeleteShareForbidden() *DeleteShareForbidden {
	return &DeleteShareForbidden{}
}

/* DeleteShareForbidden describes a response with status code 403, with default header values.

[Forbidden] User is not authorized to access storage APIs.
*/
type DeleteShareForbidden struct {
	Payload *models.ErrorResponse
}

func (o *DeleteShareForbidden) Error() string {
	return fmt.Sprintf("[DELETE /shares/{shareUid}][%d] deleteShareForbidden  %+v", 403, o.Payload)
}
func (o *DeleteShareForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteShareForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteShareNotFound creates a DeleteShareNotFound with default headers values
func NewDeleteShareNotFound() *DeleteShareNotFound {
	return &DeleteShareNotFound{}
}

/* DeleteShareNotFound describes a response with status code 404, with default header values.

[Not Found] Resource not found.
*/
type DeleteShareNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DeleteShareNotFound) Error() string {
	return fmt.Sprintf("[DELETE /shares/{shareUid}][%d] deleteShareNotFound  %+v", 404, o.Payload)
}
func (o *DeleteShareNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteShareNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteShareServiceUnavailable creates a DeleteShareServiceUnavailable with default headers values
func NewDeleteShareServiceUnavailable() *DeleteShareServiceUnavailable {
	return &DeleteShareServiceUnavailable{}
}

/* DeleteShareServiceUnavailable describes a response with status code 503, with default header values.

[Service Unavailable] See response body for more detail.
*/
type DeleteShareServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *DeleteShareServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /shares/{shareUid}][%d] deleteShareServiceUnavailable  %+v", 503, o.Payload)
}
func (o *DeleteShareServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteShareServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
