// Code generated by go-swagger; DO NOT EDIT.

package flashbacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFlashbacksParams creates a new GetFlashbacksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFlashbacksParams() *GetFlashbacksParams {
	return &GetFlashbacksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFlashbacksParamsWithTimeout creates a new GetFlashbacksParams object
// with the ability to set a timeout on a request.
func NewGetFlashbacksParamsWithTimeout(timeout time.Duration) *GetFlashbacksParams {
	return &GetFlashbacksParams{
		timeout: timeout,
	}
}

// NewGetFlashbacksParamsWithContext creates a new GetFlashbacksParams object
// with the ability to set a context for a request.
func NewGetFlashbacksParamsWithContext(ctx context.Context) *GetFlashbacksParams {
	return &GetFlashbacksParams{
		Context: ctx,
	}
}

// NewGetFlashbacksParamsWithHTTPClient creates a new GetFlashbacksParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFlashbacksParamsWithHTTPClient(client *http.Client) *GetFlashbacksParams {
	return &GetFlashbacksParams{
		HTTPClient: client,
	}
}

/* GetFlashbacksParams contains all the parameters to send to the API endpoint
   for the get flashbacks operation.

   Typically these are written to a http.Request.
*/
type GetFlashbacksParams struct {

	/* Count.

	   The maximum number of image files to be returned per year. Defaulted to 1.
	*/
	Count *int64

	/* Duration.

	   The optional flashbacks duration. Possible values are: day or week or month. Defaulted to week.
	*/
	Duration *string

	/* From.

	   The date for which flashbacks need to be generated. The date is UTC. Defaulted to the current date. (Example: 2017-05-25T06:50:39.000Z)
	*/
	From *string

	/* Virtualfolder.

	   Folder that represents various client types at the root level and contains their respective data. Defaulted to VZMOBILE.
	*/
	Virtualfolder *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get flashbacks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFlashbacksParams) WithDefaults() *GetFlashbacksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get flashbacks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFlashbacksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get flashbacks params
func (o *GetFlashbacksParams) WithTimeout(timeout time.Duration) *GetFlashbacksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get flashbacks params
func (o *GetFlashbacksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get flashbacks params
func (o *GetFlashbacksParams) WithContext(ctx context.Context) *GetFlashbacksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get flashbacks params
func (o *GetFlashbacksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get flashbacks params
func (o *GetFlashbacksParams) WithHTTPClient(client *http.Client) *GetFlashbacksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get flashbacks params
func (o *GetFlashbacksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get flashbacks params
func (o *GetFlashbacksParams) WithCount(count *int64) *GetFlashbacksParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get flashbacks params
func (o *GetFlashbacksParams) SetCount(count *int64) {
	o.Count = count
}

// WithDuration adds the duration to the get flashbacks params
func (o *GetFlashbacksParams) WithDuration(duration *string) *GetFlashbacksParams {
	o.SetDuration(duration)
	return o
}

// SetDuration adds the duration to the get flashbacks params
func (o *GetFlashbacksParams) SetDuration(duration *string) {
	o.Duration = duration
}

// WithFrom adds the from to the get flashbacks params
func (o *GetFlashbacksParams) WithFrom(from *string) *GetFlashbacksParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get flashbacks params
func (o *GetFlashbacksParams) SetFrom(from *string) {
	o.From = from
}

// WithVirtualfolder adds the virtualfolder to the get flashbacks params
func (o *GetFlashbacksParams) WithVirtualfolder(virtualfolder *string) *GetFlashbacksParams {
	o.SetVirtualfolder(virtualfolder)
	return o
}

// SetVirtualfolder adds the virtualfolder to the get flashbacks params
func (o *GetFlashbacksParams) SetVirtualfolder(virtualfolder *string) {
	o.Virtualfolder = virtualfolder
}

// WriteToRequest writes these params to a swagger request
func (o *GetFlashbacksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.Duration != nil {

		// query param duration
		var qrDuration string

		if o.Duration != nil {
			qrDuration = *o.Duration
		}
		qDuration := qrDuration
		if qDuration != "" {

			if err := r.SetQueryParam("duration", qDuration); err != nil {
				return err
			}
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom string

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.Virtualfolder != nil {

		// query param virtualfolder
		var qrVirtualfolder string

		if o.Virtualfolder != nil {
			qrVirtualfolder = *o.Virtualfolder
		}
		qVirtualfolder := qrVirtualfolder
		if qVirtualfolder != "" {

			if err := r.SetQueryParam("virtualfolder", qVirtualfolder); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
