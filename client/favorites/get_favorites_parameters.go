// Code generated by go-swagger; DO NOT EDIT.

package favorites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetFavoritesParams creates a new GetFavoritesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFavoritesParams() *GetFavoritesParams {
	return &GetFavoritesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFavoritesParamsWithTimeout creates a new GetFavoritesParams object
// with the ability to set a timeout on a request.
func NewGetFavoritesParamsWithTimeout(timeout time.Duration) *GetFavoritesParams {
	return &GetFavoritesParams{
		timeout: timeout,
	}
}

// NewGetFavoritesParamsWithContext creates a new GetFavoritesParams object
// with the ability to set a context for a request.
func NewGetFavoritesParamsWithContext(ctx context.Context) *GetFavoritesParams {
	return &GetFavoritesParams{
		Context: ctx,
	}
}

// NewGetFavoritesParamsWithHTTPClient creates a new GetFavoritesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFavoritesParamsWithHTTPClient(client *http.Client) *GetFavoritesParams {
	return &GetFavoritesParams{
		HTTPClient: client,
	}
}

/* GetFavoritesParams contains all the parameters to send to the API endpoint
   for the get favorites operation.

   Typically these are written to a http.Request.
*/
type GetFavoritesParams struct {

	/* Filetype.

	   Allow clients to restrict the listing favorites to file of a single type - 'image', 'music', 'video', 'documents' or ‘all’

	   Default: "all"
	*/
	Filetype *string

	/* Type.

	   Allow clients to restrict the listing favorites to files, folders or both

	   Default: "filefolder"
	*/
	Type *string

	/* Virtualfolder.

	   Folder that represents various client types at the root level and contains their respective data.
	*/
	Virtualfolder string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get favorites params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFavoritesParams) WithDefaults() *GetFavoritesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get favorites params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFavoritesParams) SetDefaults() {
	var (
		filetypeDefault = string("all")

		typeVarDefault = string("filefolder")
	)

	val := GetFavoritesParams{
		Filetype: &filetypeDefault,
		Type:     &typeVarDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get favorites params
func (o *GetFavoritesParams) WithTimeout(timeout time.Duration) *GetFavoritesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get favorites params
func (o *GetFavoritesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get favorites params
func (o *GetFavoritesParams) WithContext(ctx context.Context) *GetFavoritesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get favorites params
func (o *GetFavoritesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get favorites params
func (o *GetFavoritesParams) WithHTTPClient(client *http.Client) *GetFavoritesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get favorites params
func (o *GetFavoritesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFiletype adds the filetype to the get favorites params
func (o *GetFavoritesParams) WithFiletype(filetype *string) *GetFavoritesParams {
	o.SetFiletype(filetype)
	return o
}

// SetFiletype adds the filetype to the get favorites params
func (o *GetFavoritesParams) SetFiletype(filetype *string) {
	o.Filetype = filetype
}

// WithType adds the typeVar to the get favorites params
func (o *GetFavoritesParams) WithType(typeVar *string) *GetFavoritesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get favorites params
func (o *GetFavoritesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithVirtualfolder adds the virtualfolder to the get favorites params
func (o *GetFavoritesParams) WithVirtualfolder(virtualfolder string) *GetFavoritesParams {
	o.SetVirtualfolder(virtualfolder)
	return o
}

// SetVirtualfolder adds the virtualfolder to the get favorites params
func (o *GetFavoritesParams) SetVirtualfolder(virtualfolder string) {
	o.Virtualfolder = virtualfolder
}

// WriteToRequest writes these params to a swagger request
func (o *GetFavoritesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filetype != nil {

		// query param filetype
		var qrFiletype string

		if o.Filetype != nil {
			qrFiletype = *o.Filetype
		}
		qFiletype := qrFiletype
		if qFiletype != "" {

			if err := r.SetQueryParam("filetype", qFiletype); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	// query param virtualfolder
	qrVirtualfolder := o.Virtualfolder
	qVirtualfolder := qrVirtualfolder
	if qVirtualfolder != "" {

		if err := r.SetQueryParam("virtualfolder", qVirtualfolder); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
