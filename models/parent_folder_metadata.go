// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ParentFolderMetadata parent folder metadata
//
// swagger:model parent_folder_metadata
type ParentFolderMetadata struct {
	FolderMetadata

	// file
	File FileMetadataList `json:"file,omitempty"`

	// folder
	Folder FolderMetadataList `json:"folder,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ParentFolderMetadata) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 FolderMetadata
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.FolderMetadata = aO0

	// AO1
	var dataAO1 struct {
		File FileMetadataList `json:"file,omitempty"`

		Folder FolderMetadataList `json:"folder,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.File = dataAO1.File

	m.Folder = dataAO1.Folder

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ParentFolderMetadata) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.FolderMetadata)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		File FileMetadataList `json:"file,omitempty"`

		Folder FolderMetadataList `json:"folder,omitempty"`
	}

	dataAO1.File = m.File

	dataAO1.Folder = m.Folder

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this parent folder metadata
func (m *ParentFolderMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with FolderMetadata
	if err := m.FolderMetadata.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParentFolderMetadata) validateFile(formats strfmt.Registry) error {

	if swag.IsZero(m.File) { // not required
		return nil
	}

	if err := m.File.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("file")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("file")
		}
		return err
	}

	return nil
}

func (m *ParentFolderMetadata) validateFolder(formats strfmt.Registry) error {

	if swag.IsZero(m.Folder) { // not required
		return nil
	}

	if err := m.Folder.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("folder")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("folder")
		}
		return err
	}

	return nil
}

// ContextValidate validate this parent folder metadata based on the context it is used
func (m *ParentFolderMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with FolderMetadata
	if err := m.FolderMetadata.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFolder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParentFolderMetadata) contextValidateFile(ctx context.Context, formats strfmt.Registry) error {

	if err := m.File.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("file")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("file")
		}
		return err
	}

	return nil
}

func (m *ParentFolderMetadata) contextValidateFolder(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Folder.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("folder")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("folder")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParentFolderMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParentFolderMetadata) UnmarshalBinary(b []byte) error {
	var res ParentFolderMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
