// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseFolderMetadata base folder metadata
//
// swagger:model base_folder_metadata
type BaseFolderMetadata struct {

	// The number of items the folder contains
	// Required: true
	Count *int64 `json:"count"`

	// If true, the folder has been logically deleted
	// Required: true
	Deleted *bool `json:"deleted"`

	// The name of the folder
	// Required: true
	Name *string `json:"name"`

	// The name of the folder's parent folder
	// Required: true
	ParentPath *string `json:"parentPath"`

	// The size of the folder, in bytes
	// Required: true
	Size *int64 `json:"size"`

	// Unique identifier of the resource
	// Required: true
	URI *string `json:"uri"`

	// Folder version.  This number increases when the folder content changes
	// Required: true
	Version *int64 `json:"version"`

	// Creation timestamp for the folder's current version, in ISO-8601 format
	// Required: true
	VersionCreated *string `json:"versionCreated"`

	// Array of viewUid
	// Required: true
	ViewUID []*BaseFolderMetadataViewUIDItems0 `json:"viewUid"`
}

// Validate validates this base folder metadata
func (m *BaseFolderMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseFolderMetadata) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *BaseFolderMetadata) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *BaseFolderMetadata) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BaseFolderMetadata) validateParentPath(formats strfmt.Registry) error {

	if err := validate.Required("parentPath", "body", m.ParentPath); err != nil {
		return err
	}

	return nil
}

func (m *BaseFolderMetadata) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *BaseFolderMetadata) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	return nil
}

func (m *BaseFolderMetadata) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *BaseFolderMetadata) validateVersionCreated(formats strfmt.Registry) error {

	if err := validate.Required("versionCreated", "body", m.VersionCreated); err != nil {
		return err
	}

	return nil
}

func (m *BaseFolderMetadata) validateViewUID(formats strfmt.Registry) error {

	if err := validate.Required("viewUid", "body", m.ViewUID); err != nil {
		return err
	}

	for i := 0; i < len(m.ViewUID); i++ {
		if swag.IsZero(m.ViewUID[i]) { // not required
			continue
		}

		if m.ViewUID[i] != nil {
			if err := m.ViewUID[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("viewUid" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("viewUid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this base folder metadata based on the context it is used
func (m *BaseFolderMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateViewUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseFolderMetadata) contextValidateViewUID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ViewUID); i++ {

		if m.ViewUID[i] != nil {
			if err := m.ViewUID[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("viewUid" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("viewUid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseFolderMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseFolderMetadata) UnmarshalBinary(b []byte) error {
	var res BaseFolderMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BaseFolderMetadataViewUIDItems0 base folder metadata view UID items0
//
// swagger:model BaseFolderMetadataViewUIDItems0
type BaseFolderMetadataViewUIDItems0 struct {

	// Shared Type
	// Required: true
	Type *string `json:"type"`

	// Unique id of view
	// Required: true
	UID *string `json:"uid"`

	// Type of view
	// Required: true
	ViewType *string `json:"viewType"`
}

// Validate validates this base folder metadata view UID items0
func (m *BaseFolderMetadataViewUIDItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseFolderMetadataViewUIDItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *BaseFolderMetadataViewUIDItems0) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

func (m *BaseFolderMetadataViewUIDItems0) validateViewType(formats strfmt.Registry) error {

	if err := validate.Required("viewType", "body", m.ViewType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this base folder metadata view UID items0 based on context it is used
func (m *BaseFolderMetadataViewUIDItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BaseFolderMetadataViewUIDItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseFolderMetadataViewUIDItems0) UnmarshalBinary(b []byte) error {
	var res BaseFolderMetadataViewUIDItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
