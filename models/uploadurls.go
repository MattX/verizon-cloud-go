// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Uploadurls uploadurls
//
// swagger:model uploadurls
type Uploadurls struct {

	// The commit url to create the file after binary content is uploaded in chunks.
	Commiturl string `json:"commiturl,omitempty"`

	// The upload url with the uploadid to upload the binary content of the file.
	// Required: true
	Uploadurl *string `json:"uploadurl"`
}

// Validate validates this uploadurls
func (m *Uploadurls) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUploadurl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Uploadurls) validateUploadurl(formats strfmt.Registry) error {

	if err := validate.Required("uploadurl", "body", m.Uploadurl); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this uploadurls based on context it is used
func (m *Uploadurls) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Uploadurls) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Uploadurls) UnmarshalBinary(b []byte) error {
	var res Uploadurls
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
