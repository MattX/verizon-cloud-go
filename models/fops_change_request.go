// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FopsChangeRequest fops change request
//
// swagger:model fops_change_request
type FopsChangeRequest struct {

	// Defines how name conflicts are resolved, if the 'safe' parameter is set to 'true'. If set to 'copy', a new file is written to the destination folder with a non-conflicting name. If not set, the operation is rolled back and operation returns '409 Conflict'.
	// Required: true
	Conflictsolve *string `json:"conflictsolve"`

	// If 'true', ensures that name conflicts are resolved according to the value of the 'conflictsolve' parameter. Defaults to 'false', in which case the operation will overwrite an existing file/folder of the same name.
	// Required: true
	Safe bool `json:"safe"`

	// Full path of the file/folder for copy/move/rename operations.
	// Required: true
	Src *string `json:"src"`

	// Full path of the target file/folder for copy/move/rename operations. In case of files the full/changed name should be included in the target.
	// Required: true
	Target *string `json:"target"`
}

// Validate validates this fops change request
func (m *FopsChangeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConflictsolve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FopsChangeRequest) validateConflictsolve(formats strfmt.Registry) error {

	if err := validate.Required("conflictsolve", "body", m.Conflictsolve); err != nil {
		return err
	}

	return nil
}

func (m *FopsChangeRequest) validateSafe(formats strfmt.Registry) error {

	if err := validate.Required("safe", "body", bool(m.Safe)); err != nil {
		return err
	}

	return nil
}

func (m *FopsChangeRequest) validateSrc(formats strfmt.Registry) error {

	if err := validate.Required("src", "body", m.Src); err != nil {
		return err
	}

	return nil
}

func (m *FopsChangeRequest) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this fops change request based on context it is used
func (m *FopsChangeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FopsChangeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FopsChangeRequest) UnmarshalBinary(b []byte) error {
	var res FopsChangeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
