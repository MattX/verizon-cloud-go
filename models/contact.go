// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Contact contact
//
// swagger:model contact
type Contact struct {

	// List of contact's addresses
	Address []*ContactsAddress `json:"address"`

	// Contacts's anniversary date
	Anniversary string `json:"anniversary,omitempty"`

	// Contacts's assistant name
	Assistant string `json:"assistant,omitempty"`

	// Contacts's birth date
	Birthday string `json:"birthday,omitempty"`

	// Contacts's children names
	Children string `json:"children,omitempty"`

	// Timestamp the contact was created
	Created string `json:"created,omitempty"`

	// List of contact's email addresses
	Email []*ContactsEmail `json:"email"`

	// Marked true for favorite contacts
	Favorite *bool `json:"favorite,omitempty"`

	// Contact's given name
	Firstname string `json:"firstname,omitempty"`

	// Contacts's gender. Can have a value as M(ale), F(emale) or U(ndefined)
	Gender string `json:"gender,omitempty"`

	// Unique identifier for this contact
	ID string `json:"id,omitempty"`

	// List of contact's IM addresses
	Im []*ContactsIm `json:"im"`

	// Marked true for emergency contacts. Maximum 3 contacts can be defined as incaseofemergency.
	Incaseofemergency *bool `json:"incaseofemergency,omitempty"`

	// Contacts's job titile
	Jobtitle string `json:"jobtitle,omitempty"`

	// Contact's surname
	Lastname string `json:"lastname,omitempty"`

	// Contacts's marital status
	Maritalstatus string `json:"maritalstatus,omitempty"`

	// Contact's middle name
	Middlename string `json:"middlename,omitempty"`

	// Timestamp the contact was last updated
	Modified string `json:"modified,omitempty"`

	// Contact's name prefix
	Nameprefix string `json:"nameprefix,omitempty"`

	// Contact's name suffix
	Namesuffix string `json:"namesuffix,omitempty"`

	// Contacts's nickname
	Nickname string `json:"nickname,omitempty"`

	// Arbitrary text associated with this contact
	Note string `json:"note,omitempty"`

	// Contacts's company name
	Orgname string `json:"orgname,omitempty"`

	// Contacts's company department
	Orgunit string `json:"orgunit,omitempty"`

	// Contacts's profession
	Profession string `json:"profession,omitempty"`

	// Contacts's relationship with the person
	Relationship string `json:"relationship,omitempty"`

	// Origin of the contact
	Source string `json:"source,omitempty"`

	// Contacts's spouse name
	Spouse string `json:"spouse,omitempty"`

	// List of contact's telephone numbers
	Tel []*ContactsTel `json:"tel"`

	// Contact version.  This number increases when the contact is updated
	Version int64 `json:"version,omitempty"`
}

// Validate validates this contact
func (m *Contact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contact) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	for i := 0; i < len(m.Address); i++ {
		if swag.IsZero(m.Address[i]) { // not required
			continue
		}

		if m.Address[i] != nil {
			if err := m.Address[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("address" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Contact) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	for i := 0; i < len(m.Email); i++ {
		if swag.IsZero(m.Email[i]) { // not required
			continue
		}

		if m.Email[i] != nil {
			if err := m.Email[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("email" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("email" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Contact) validateIm(formats strfmt.Registry) error {
	if swag.IsZero(m.Im) { // not required
		return nil
	}

	for i := 0; i < len(m.Im); i++ {
		if swag.IsZero(m.Im[i]) { // not required
			continue
		}

		if m.Im[i] != nil {
			if err := m.Im[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("im" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("im" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Contact) validateTel(formats strfmt.Registry) error {
	if swag.IsZero(m.Tel) { // not required
		return nil
	}

	for i := 0; i < len(m.Tel); i++ {
		if swag.IsZero(m.Tel[i]) { // not required
			continue
		}

		if m.Tel[i] != nil {
			if err := m.Tel[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tel" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tel" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this contact based on the context it is used
func (m *Contact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contact) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Address); i++ {

		if m.Address[i] != nil {
			if err := m.Address[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("address" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Contact) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Email); i++ {

		if m.Email[i] != nil {
			if err := m.Email[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("email" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("email" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Contact) contextValidateIm(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Im); i++ {

		if m.Im[i] != nil {
			if err := m.Im[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("im" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("im" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Contact) contextValidateTel(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tel); i++ {

		if m.Tel[i] != nil {
			if err := m.Tel[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tel" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tel" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Contact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contact) UnmarshalBinary(b []byte) error {
	var res Contact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
