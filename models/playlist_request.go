// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlaylistRequest playlist request
//
// swagger:model playlist_request
type PlaylistRequest struct {

	// Name of the playlist.
	// Required: true
	Name *string `json:"name"`

	// An array of paths to items.
	// Required: true
	Paths []string `json:"paths"`

	// The type of the playlist. Can be one of 'image', 'music', 'video' or 'image-video'
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this playlist request
func (m *PlaylistRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlaylistRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistRequest) validatePaths(formats strfmt.Registry) error {

	if err := validate.Required("paths", "body", m.Paths); err != nil {
		return err
	}

	return nil
}

func (m *PlaylistRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this playlist request based on context it is used
func (m *PlaylistRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PlaylistRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlaylistRequest) UnmarshalBinary(b []byte) error {
	var res PlaylistRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
