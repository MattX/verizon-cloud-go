// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FileMetadata file metadata
//
// swagger:model file_metadata
type FileMetadata struct {
	BaseFileMetadata

	// Array of shareAssociation
	ShareAssociation []*ShareAssociation `json:"shareAssociation"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FileMetadata) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseFileMetadata
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseFileMetadata = aO0

	// AO1
	var dataAO1 struct {
		ShareAssociation []*ShareAssociation `json:"shareAssociation"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ShareAssociation = dataAO1.ShareAssociation

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FileMetadata) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseFileMetadata)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ShareAssociation []*ShareAssociation `json:"shareAssociation"`
	}

	dataAO1.ShareAssociation = m.ShareAssociation

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this file metadata
func (m *FileMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseFileMetadata
	if err := m.BaseFileMetadata.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShareAssociation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileMetadata) validateShareAssociation(formats strfmt.Registry) error {

	if swag.IsZero(m.ShareAssociation) { // not required
		return nil
	}

	for i := 0; i < len(m.ShareAssociation); i++ {
		if swag.IsZero(m.ShareAssociation[i]) { // not required
			continue
		}

		if m.ShareAssociation[i] != nil {
			if err := m.ShareAssociation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shareAssociation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shareAssociation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this file metadata based on the context it is used
func (m *FileMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseFileMetadata
	if err := m.BaseFileMetadata.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShareAssociation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileMetadata) contextValidateShareAssociation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShareAssociation); i++ {

		if m.ShareAssociation[i] != nil {
			if err := m.ShareAssociation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shareAssociation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shareAssociation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FileMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileMetadata) UnmarshalBinary(b []byte) error {
	var res FileMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
