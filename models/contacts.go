// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Contacts contacts
//
// swagger:model contacts
type Contacts struct {

	// contacts response
	// Required: true
	ContactsResponse *ContactsResponse `json:"contactsResponse"`
}

// Validate validates this contacts
func (m *Contacts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactsResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contacts) validateContactsResponse(formats strfmt.Registry) error {

	if err := validate.Required("contactsResponse", "body", m.ContactsResponse); err != nil {
		return err
	}

	if m.ContactsResponse != nil {
		if err := m.ContactsResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactsResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactsResponse")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this contacts based on the context it is used
func (m *Contacts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactsResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contacts) contextValidateContactsResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactsResponse != nil {
		if err := m.ContactsResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactsResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactsResponse")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Contacts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contacts) UnmarshalBinary(b []byte) error {
	var res Contacts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
